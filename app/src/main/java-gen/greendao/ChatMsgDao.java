package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import model.ChatMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT_MSG.
*/
public class ChatMsgDao extends AbstractDao<ChatMsg, Long> {

    public static final String TABLENAME = "CHAT_MSG";

    /**
     * Properties of entity ChatMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemberId = new Property(1, int.class, "memberId", false, "MEMBER_ID");
        public final static Property ContactId = new Property(2, int.class, "contactId", false, "CONTACT_ID");
        public final static Property ChatMsg = new Property(3, String.class, "chatMsg", false, "CHAT_MSG");
        public final static Property ChatTime = new Property(4, java.util.Date.class, "registerTime", false, "CHAT_TIME");
        public final static Property ChatType = new Property(5, int.class, "chatType", false, "CHAT_TYPE");
        public final static Property IsReceived = new Property(6, int.class, "isReceived", false, "IS_RECEIVED");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
    };


    public ChatMsgDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_MSG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MEMBER_ID' INTEGER NOT NULL ," + // 1: memberId
                "'CONTACT_ID' INTEGER NOT NULL ," + // 2: contactId
                "'CHAT_MSG' TEXT NOT NULL ," + // 3: chatMsg
                "'CHAT_TIME' INTEGER  ," + // 4: registerTime
                "'CHAT_TYPE' INTEGER NOT NULL ," + // 5: chatType
                "'IS_RECEIVED' INTEGER NOT NULL ," + // 6: isReceived
                "'STATUS' INTEGER NOT NULL );"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_MSG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMemberId());
        stmt.bindLong(3, entity.getContactId());
        stmt.bindString(4, entity.getChatMsg());
        stmt.bindLong(5, entity.getChatTime().getTime());
        stmt.bindLong(6, entity.getChatType());
        stmt.bindLong(7, entity.getIsReceived());
        stmt.bindLong(8, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatMsg readEntity(Cursor cursor, int offset) {
        ChatMsg entity = new ChatMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // memberId
            cursor.getInt(offset + 2), // contactId
            cursor.getString(offset + 3), // chatMsg
            new java.util.Date(cursor.getLong(offset + 4)), // registerTime
            cursor.getInt(offset + 5), // chatType
            cursor.getInt(offset + 6), // isReceived
            cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberId(cursor.getInt(offset + 1));
        entity.setContactId(cursor.getInt(offset + 2));
        entity.setChatMsg(cursor.getString(offset + 3));
        entity.setChatTime(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setChatType(cursor.getInt(offset + 5));
        entity.setIsReceived(cursor.getInt(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

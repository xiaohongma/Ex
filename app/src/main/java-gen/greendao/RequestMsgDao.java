package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import model.RequestMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REQUEST_MSG.
*/
public class RequestMsgDao extends AbstractDao<RequestMsg, Long> {

    public static final String TABLENAME = "REQUEST_MSG";

    /**
     * Properties of entity RequestMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemberId = new Property(1, int.class, "memberId", false, "MEMBER_ID");
        public final static Property ContactId = new Property(2, int.class, "contactId", false, "CONTACT_ID");
        public final static Property RequestId = new Property(3, int.class, "requestId", false, "REQUEST_ID");
        public final static Property RequestMsg = new Property(4, String.class, "requestMsg", false, "REQUEST_MSG");
        public final static Property RequestTime = new Property(5, java.util.Date.class, "requestTime", false, "REQUEST_TIME");
        public final static Property ContactEmail = new Property(6, String.class, "contactEmail", false, "CONTACT_EMAIL");
        public final static Property ContactName = new Property(7, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property ContactHeadBig = new Property(8, String.class, "contactHeadBig", false, "CONTACT_HEAD_BIG");
        public final static Property ContactHeadMid = new Property(9, String.class, "contactHeadMid", false, "CONTACT_HEAD_MID");
        public final static Property ContactHeadSmall = new Property(10, String.class, "contactHeadSmall", false, "CONTACT_HEAD_SMALL");
        public final static Property ContactRegisterTime = new Property(11, java.util.Date.class, "contactRegisterTime", false, "CONTACT_REGISTER_TIME");
    };


    public RequestMsgDao(DaoConfig config) {
        super(config);
    }
    
    public RequestMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REQUEST_MSG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MEMBER_ID' INTEGER NOT NULL ," + // 1: memberId
                "'CONTACT_ID' INTEGER NOT NULL ," + // 2: contactId
                "'REQUEST_ID' INTEGER NOT NULL ," + // 3: requestId
                "'REQUEST_MSG' TEXT NOT NULL ," + // 4: requestMsg
                "'REQUEST_TIME' INTEGER NOT NULL ," + // 5: requestTime
                "'CONTACT_EMAIL' TEXT NOT NULL ," + // 6: contactEmail
                "'CONTACT_NAME' TEXT NOT NULL ," + // 7: contactName
                "'CONTACT_HEAD_BIG' TEXT NOT NULL ," + // 8: contactHeadBig
                "'CONTACT_HEAD_MID' TEXT NOT NULL ," + // 9: contactHeadMid
                "'CONTACT_HEAD_SMALL' TEXT NOT NULL ," + // 10: contactHeadSmall
                "'CONTACT_REGISTER_TIME' INTEGER NOT NULL );"); // 11: contactRegisterTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REQUEST_MSG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RequestMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMemberId());
        stmt.bindLong(3, entity.getContactId());
        stmt.bindLong(4, entity.getRequestId());
        stmt.bindString(5, entity.getRequestMsg());
        stmt.bindLong(6, entity.getRequestTime().getTime());
        stmt.bindString(7, entity.getContactEmail());
        stmt.bindString(8, entity.getContactName());
        stmt.bindString(9, entity.getContactHeadBig());
        stmt.bindString(10, entity.getContactHeadMid());
        stmt.bindString(11, entity.getContactHeadSmall());
        stmt.bindLong(12, entity.getContactRegisterTime().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RequestMsg readEntity(Cursor cursor, int offset) {
        RequestMsg entity = new RequestMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // memberId
            cursor.getInt(offset + 2), // contactId
            cursor.getInt(offset + 3), // requestId
            cursor.getString(offset + 4), // requestMsg
            new java.util.Date(cursor.getLong(offset + 5)), // requestTime
            cursor.getString(offset + 6), // contactEmail
            cursor.getString(offset + 7), // contactName
            cursor.getString(offset + 8), // contactHeadBig
            cursor.getString(offset + 9), // contactHeadMid
            cursor.getString(offset + 10), // contactHeadSmall
            new java.util.Date(cursor.getLong(offset + 11)) // contactRegisterTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RequestMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberId(cursor.getInt(offset + 1));
        entity.setContactId(cursor.getInt(offset + 2));
        entity.setRequestId(cursor.getInt(offset + 3));
        entity.setRequestMsg(cursor.getString(offset + 4));
        entity.setRequestTime(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setContactEmail(cursor.getString(offset + 6));
        entity.setContactName(cursor.getString(offset + 7));
        entity.setContactHeadBig(cursor.getString(offset + 8));
        entity.setContactHeadMid(cursor.getString(offset + 9));
        entity.setContactHeadSmall(cursor.getString(offset + 10));
        entity.setContactRegisterTime(new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RequestMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RequestMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
